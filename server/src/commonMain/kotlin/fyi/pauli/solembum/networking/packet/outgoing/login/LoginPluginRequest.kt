package fyi.pauli.solembum.networking.packet.outgoing.login

import kotlinx.serialization.Serializable

/**
 * Used to implement a custom handshaking flow together with Login Plugin Response.
 *
 * Unlike plugin messages in "play" mode, these messages follow a lock-step request/response scheme, where the client is expected to respond to a request indicating whether it understood.
 * The notchian client always responds that it hasn't understood, and sends an empty payload.
 *
 * @param messageId Generated by the server - should be unique to the connection.
 * @param channel Name of the plugin channel used to send the data.
 * @param data Any data, depending on the channel. The length of this array must be inferred from the packet length.
 */
@Serializable
public data class LoginPluginRequest(
	var messageId: Int,
	var channel: @Serializable(_root_ide_package_.fyi.pauli.solembum.networking.serialization.IdentifierStringSerializer::class) fyi.pauli.solembum.models.Identifier,
	@Unprefixed var data: ByteArray,
) : fyi.pauli.solembum.networking.packet.outgoing.OutgoingPacket() {
	override val id: Int
		get() = 0x04
	override val state: fyi.pauli.solembum.networking.packet.State
		get() = _root_ide_package_.fyi.pauli.solembum.networking.packet.State.LOGIN
	override val debugName: String
		get() = "Login Plugin Request"

	override fun equals(other: Any?): Boolean {
		if (this === other) return true
		if (other == null || this::class != other::class) return false

		other as fyi.pauli.solembum.networking.packet.outgoing.login.LoginPluginRequest

		if (messageId != other.messageId) return false
		if (channel != other.channel) return false
		if (!data.contentEquals(other.data)) return false

		return true
	}

	override fun hashCode(): Int {
		var result = messageId
		result = 31 * result + channel.hashCode()
		result = 31 * result + data.contentHashCode()
		return result
	}
}